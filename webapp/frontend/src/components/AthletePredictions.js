import React, { useState, useEffect } from 'react';
import { olympicDataService } from '../services/api';
import '../styles/AthletePredictions.css';

const AthletePredictions = () => {
  const [athletes, setAthletes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [limit, setLimit] = useState(50);
  const [model, setModel] = useState('best');

  const loadAthletes = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await olympicDataService.predictAthleteMedals(limit, model);
      setAthletes(response.data.data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadAthletes();
  }, [limit, model]);

  const getSportIcon = (sport) => {
    const sportIcons = {
      'Athletics': 'üèÉ',
      'Swimming': 'üèä',
      'Gymnastics': 'ü§∏',
      'Cycling': 'üö¥',
      'Rowing': 'üö£',
      'Sailing': '‚õµ',
      'Shooting': 'üéØ',
      'Boxing': 'ü•ä',
      'Wrestling': 'ü§º',
      'Judo': 'ü•ã',
      'Taekwondo': 'ü•ã',
      'Weightlifting': 'üèãÔ∏è',
      'Tennis': 'üéæ',
      'Badminton': 'üè∏',
      'Table Tennis': 'üèì',
      'Basketball': 'üèÄ',
      'Volleyball': 'üèê',
      'Football': '‚öΩ',
      'Hockey': 'üèë',
      'Handball': 'ü§æ',
      'Water Polo': 'ü§Ω',
      'Rugby': 'üèâ',
      'Golf': '‚õ≥',
      'Archery': 'üèπ',
      'Equestrian': 'üèá',
      'Fencing': 'ü§∫',
      'Canoeing': 'üõ∂',
      'Kayaking': 'üõ∂'
    };
    
    return sportIcons[sport] || 'üèÖ';
  };

  const getCountryFlag = (country) => {
    const countryFlags = {
      'France': 'üá´üá∑',
      'United States': 'üá∫üá∏',
      'China': 'üá®üá≥',
      'Germany': 'üá©üá™',
      'Great Britain': 'üá¨üáß',
      'Japan': 'üáØüáµ',
      'Australia': 'üá¶üá∫',
      'Italy': 'üáÆüáπ',
      'Spain': 'üá™üá∏',
      'Canada': 'üá®üá¶',
      'Brazil': 'üáßüá∑',
      'Russia': 'üá∑üá∫',
      'South Korea': 'üá∞üá∑',
      'Netherlands': 'üá≥üá±',
      'Sweden': 'üá∏üá™',
      'Norway': 'üá≥üá¥',
      'Denmark': 'üá©üá∞',
      'Finland': 'üá´üáÆ',
      'Switzerland': 'üá®üá≠',
      'Austria': 'üá¶üáπ',
      'Belgium': 'üáßüá™',
      'Poland': 'üáµüá±',
      'Czech Republic': 'üá®üáø',
      'Hungary': 'üá≠üá∫',
      'Romania': 'üá∑üá¥',
      'Bulgaria': 'üáßüá¨',
      'Croatia': 'üá≠üá∑',
      'Serbia': 'üá∑üá∏',
      'Slovenia': 'üá∏üáÆ',
      'Slovakia': 'üá∏üá∞',
      'Ukraine': 'üá∫üá¶',
      'Belarus': 'üáßüáæ',
      'Lithuania': 'üá±üáπ',
      'Latvia': 'üá±üáª',
      'Estonia': 'üá™üá™',
      'Moldova': 'üá≤üá©',
      'Georgia': 'üá¨üá™',
      'Armenia': 'üá¶üá≤',
      'Azerbaijan': 'üá¶üáø',
      'Kazakhstan': 'üá∞üáø',
      'Uzbekistan': 'üá∫üáø',
      'Kyrgyzstan': 'üá∞üá¨',
      'Tajikistan': 'üáπüáØ',
      'Turkmenistan': 'üáπüá≤',
      'Mongolia': 'üá≤üá≥',
      'India': 'üáÆüá≥',
      'Pakistan': 'üáµüá∞',
      'Bangladesh': 'üáßüá©',
      'Sri Lanka': 'üá±üá∞',
      'Nepal': 'üá≥üáµ',
      'Bhutan': 'üáßüáπ',
      'Maldives': 'üá≤üáª',
      'Afghanistan': 'üá¶üá´',
      'Iran': 'üáÆüá∑',
      'Iraq': 'üáÆüá∂',
      'Syria': 'üá∏üáæ',
      'Lebanon': 'üá±üáß',
      'Jordan': 'üáØüá¥',
      'Israel': 'üáÆüá±',
      'Palestine': 'üáµüá∏',
      'Saudi Arabia': 'üá∏üá¶',
      'United Arab Emirates': 'üá¶üá™',
      'Qatar': 'üá∂üá¶',
      'Bahrain': 'üáßüá≠',
      'Kuwait': 'üá∞üáº',
      'Oman': 'üá¥üá≤',
      'Yemen': 'üáæüá™',
      'Egypt': 'üá™üá¨',
      'Libya': 'üá±üáæ',
      'Tunisia': 'üáπüá≥',
      'Algeria': 'üá©üáø',
      'Morocco': 'üá≤üá¶',
      'Sudan': 'üá∏üá©',
      'Ethiopia': 'üá™üáπ',
      'Kenya': 'üá∞üá™',
      'Uganda': 'üá∫üá¨',
      'Tanzania': 'üáπüáø',
      'Rwanda': 'üá∑üáº',
      'Burundi': 'üáßüáÆ',
      'South Africa': 'üáøüá¶',
      'Namibia': 'üá≥üá¶',
      'Botswana': 'üáßüáº',
      'Zimbabwe': 'üáøüáº',
      'Zambia': 'üáøüá≤',
      'Malawi': 'üá≤üáº',
      'Mozambique': 'üá≤üáø',
      'Madagascar': 'üá≤üá¨',
      'Mauritius': 'üá≤üá∫',
      'Seychelles': 'üá∏üá®',
      'Comoros': 'üá∞üá≤',
      'Djibouti': 'üá©üáØ',
      'Somalia': 'üá∏üá¥',
      'Eritrea': 'üá™üá∑',
      'Ghana': 'üá¨üá≠',
      'Nigeria': 'üá≥üá¨',
      'Cameroon': 'üá®üá≤',
      'Central African Republic': 'üá®üá´',
      'Chad': 'üáπüá©',
      'Niger': 'üá≥üá™',
      'Mali': 'üá≤üá±',
      'Burkina Faso': 'üáßüá´',
      'Senegal': 'üá∏üá≥',
      'Gambia': 'üá¨üá≤',
      'Guinea-Bissau': 'üá¨üáº',
      'Guinea': 'üá¨üá≥',
      'Sierra Leone': 'üá∏üá±',
      'Liberia': 'üá±üá∑',
      'Ivory Coast': 'üá®üáÆ',
      'Togo': 'üáπüá¨',
      'Benin': 'üáßüáØ',
      'Cape Verde': 'üá®üáª',
      'S√£o Tom√© and Pr√≠ncipe': 'üá∏üáπ',
      'Equatorial Guinea': 'üá¨üá∂',
      'Gabon': 'üá¨üá¶',
      'Republic of the Congo': 'üá®üá¨',
      'Democratic Republic of the Congo': 'üá®üá©',
      'Angola': 'üá¶üá¥',
      'Zambia': 'üáøüá≤',
      'Malawi': 'üá≤üáº',
      'Mozambique': 'üá≤üáø',
      'Madagascar': 'üá≤üá¨',
      'Mauritius': 'üá≤üá∫',
      'Seychelles': 'üá∏üá®',
      'Comoros': 'üá∞üá≤',
      'Djibouti': 'üá©üáØ',
      'Somalia': 'üá∏üá¥',
      'Eritrea': 'üá™üá∑'
    };
    
    return countryFlags[country] || 'üè≥Ô∏è';
  };

  const getScoreLevel = (score) => {
    if (score >= 0.8) return { level: 'Excellent', color: '#4caf50' };
    if (score >= 0.6) return { level: 'Tr√®s Bon', color: '#8bc34a' };
    if (score >= 0.4) return { level: 'Bon', color: '#ff9800' };
    if (score >= 0.2) return { level: 'Moyen', color: '#ff5722' };
    return { level: 'Faible', color: '#f44336' };
  };

  const getModelName = (modelCode) => {
    switch (modelCode) {
      case 'best': return 'Meilleur Mod√®le';
      case 'second': return 'Deuxi√®me Mod√®le';
      default: return modelCode;
    }
  };

  return (
    <div className="athlete-predictions">
      <div className="prediction-controls">
        <h3>Pr√©dictions par Athl√®te</h3>
        <div className="controls-row">
          <div className="control-group">
            <label>Nombre d'athl√®tes:</label>
            <select value={limit} onChange={(e) => setLimit(parseInt(e.target.value))}>
              <option value={25}>Top 25</option>
              <option value={50}>Top 50</option>
              <option value={100}>Top 100</option>
              <option value={200}>Top 200</option>
            </select>
          </div>
          <div className="control-group">
            <label>Mod√®le:</label>
            <select value={model} onChange={(e) => setModel(e.target.value)}>
              <option value="best">Meilleur Mod√®le</option>
              <option value="second">Deuxi√®me Mod√®le</option>
            </select>
          </div>
          <button onClick={loadAthletes} disabled={loading}>
            {loading ? 'Chargement...' : 'Actualiser'}
          </button>
        </div>
        <div className="model-info">
          Mod√®le utilis√©: {getModelName(model)}
        </div>
      </div>

      {error && (
        <div className="error-message">
          ‚ùå Erreur: {error}
        </div>
      )}

      {loading && (
        <div className="loading-message">
          üîÑ Chargement des pr√©dictions d'athl√®tes...
        </div>
      )}

      {!loading && athletes.length > 0 && (
        <div className="athletes-results">
          <h4>Performance Pr√©dite des Athl√®tes</h4>
          <div className="athletes-list">
            {athletes.map((athlete, index) => {
              const scoreLevel = getScoreLevel(athlete.score);
              return (
                <div key={index} className="athlete-card">
                  <div className="athlete-rank">#{index + 1}</div>
                  
                  <div className="athlete-info">
                    <div className="athlete-name">{athlete.athlete}</div>
                    <div className="athlete-details">
                      <span className="athlete-country">
                        {getCountryFlag(athlete.country)} {athlete.country}
                      </span>
                      <span className="athlete-sport">
                        {getSportIcon(athlete.sport)} {athlete.sport}
                      </span>
                    </div>
                  </div>
                  
                  <div className="athlete-stats">
                    <div className="historical-medals">
                      <div className="medals-label">M√©dailles Historiques</div>
                      <div className="medals-count">{athlete.total}</div>
                    </div>
                    
                    <div className="prediction-score">
                      <div className="score-label">Score de Pr√©diction</div>
                      <div 
                        className="score-value"
                        style={{ color: scoreLevel.color }}
                      >
                        {(athlete.score * 100).toFixed(1)}%
                      </div>
                      <div 
                        className="score-level"
                        style={{ color: scoreLevel.color }}
                      >
                        {scoreLevel.level}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {!loading && athletes.length === 0 && !error && (
        <div className="no-data">
          <div className="no-data-icon">üèÉ‚Äç‚ôÇÔ∏è</div>
          <div className="no-data-text">
            Aucune donn√©e d'athl√®te disponible
          </div>
        </div>
      )}
    </div>
  );
};

export default AthletePredictions;
