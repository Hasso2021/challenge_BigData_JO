import React, { useState, useEffect } from 'react';
import { olympicDataService } from '../services/api';
import '../styles/GDPMedalsAnalysis.css';

const GDPMedalsAnalysis = () => {
  const [correlationData, setCorrelationData] = useState(null);
  const [sportCostData, setSportCostData] = useState(null);
  const [gdpPerCapitaData, setGdpPerCapitaData] = useState(null);
  const [summaryData, setSummaryData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('overview');

  useEffect(() => {
    fetchAnalysisData();
  }, []);

  const fetchAnalysisData = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîÑ Chargement des donn√©es d\'analyse PIB-m√©dailles...');

      const [summaryResponse, correlationResponse, sportCostResponse, gdpPerCapitaResponse] = await Promise.all([
        olympicDataService.getGDPAnalysisSummary(),
        olympicDataService.getGDPCorrelationByYear(),
        olympicDataService.getGDPCorrelationBySportCost(),
        olympicDataService.getGDPCorrelationPerCapita()
      ]);

      console.log('‚úÖ Donn√©es d\'analyse charg√©es:', {
        summary: summaryResponse?.data,
        correlation: correlationResponse?.data,
        sportCost: sportCostResponse?.data,
        gdpPerCapita: gdpPerCapitaResponse?.data
      });

      setSummaryData(summaryResponse.data);
      setCorrelationData(correlationResponse.data);
      setSportCostData(sportCostResponse.data);
      setGdpPerCapitaData(gdpPerCapitaResponse.data);

    } catch (err) {
      console.error('‚ùå Erreur lors du chargement des donn√©es d\'analyse:', err);
      setError('Erreur lors du chargement des donn√©es d\'analyse');
    } finally {
      setLoading(false);
    }
  };

  const renderOverviewTab = () => {
    if (!summaryData) return <div>Chargement...</div>;

    return (
      <div className="gdp-analysis-overview">
        <div className="analysis-header">
          <h2>üìä Analyse de Corr√©lation PIB-M√©dailles Olympiques</h2>
          <p className="analysis-subtitle">
            Cette analyse examine la relation entre la puissance √©conomique des pays et leurs performances aux Jeux Olympiques
          </p>
        </div>

        <div className="summary-cards">
          <div className="summary-card">
            <div className="card-icon">üìà</div>
            <div className="card-content">
              <h3>Corr√©lation Moyenne</h3>
              <div className="correlation-value">
                {summaryData.mean_pearson_correlation?.toFixed(3)}
              </div>
              <div className="correlation-interpretation">
                {summaryData.correlation_interpretation} et {summaryData.correlation_direction}
              </div>
            </div>
          </div>

          <div className="summary-card">
            <div className="card-icon">üìÖ</div>
            <div className="card-content">
              <h3>P√©riode Analys√©e</h3>
              <div className="period-range">
                {summaryData.analysis_period || `${summaryData.years_analyzed?.[0]} - ${summaryData.years_analyzed?.[summaryData.years_analyzed.length - 1]}`}
              </div>
              <div className="years-count">
                {summaryData.years_analyzed?.length} ann√©es analys√©es
              </div>
              <div className="total-years">
                {summaryData.total_years_available} ann√©es disponibles
              </div>
            </div>
          </div>

          <div className="summary-card">
            <div className="card-icon">üèÖ</div>
            <div className="card-content">
              <h3>Sports Analys√©s</h3>
              <div className="sports-breakdown">
                {summaryData.sport_cost_analysis && Object.entries(summaryData.sport_cost_analysis).map(([level, data]) => (
                  <div key={level} className="sport-level">
                    <span className="level-name">{level.replace('_', ' ')}</span>
                    <span className="level-count">{data.sports_count} sports</span>
                  </div>
                ))}
              </div>
              <div className="total-sports">
                {summaryData.total_sports_available} sports disponibles
              </div>
            </div>
          </div>
        </div>

        <div className="key-insights">
          <h3>üîç Principales Observations</h3>
          <ul>
            <li>
              <strong>Corr√©lation positive forte :</strong> Les pays avec un PIB √©lev√© remportent g√©n√©ralement plus de m√©dailles
            </li>
            <li>
              <strong>Sports √† co√ªt √©lev√© :</strong> La corr√©lation est plus forte pour les sports n√©cessitant des infrastructures co√ªteuses
            </li>
            <li>
              <strong>PIB par habitant :</strong> Un indicateur plus pr√©cis que le PIB total pour certains pays
            </li>
            <li>
              <strong>Exceptions notables :</strong> Certains pays performent mieux que leur PIB ne le sugg√®re
            </li>
            <li>
              <strong>Source de donn√©es :</strong> {summaryData.data_source || 'Base de donn√©es Supabase'}
            </li>
            <li>
              <strong>Note :</strong> Cette analyse utilise toutes les donn√©es disponibles avec des donn√©es PIB historiques
            </li>
          </ul>
        </div>
      </div>
    );
  };

  const renderCorrelationByYear = () => {
    if (!correlationData) return <div>Chargement...</div>;

    const years = Object.keys(correlationData).sort();
    const pearsonCorrelations = years.map(year => correlationData[year]?.pearson?.correlation || 0);
    const spearmanCorrelations = years.map(year => correlationData[year]?.spearman?.correlation || 0);

    return (
      <div className="correlation-by-year">
        <h3>üìà √âvolution de la Corr√©lation dans le Temps</h3>
        
        <div className="correlation-chart">
          <div className="chart-container">
            <div className="chart-bars">
              {years.map((year, index) => (
                <div key={year} className="year-bar">
                  <div className="bar-group">
                    <div 
                      className="bar pearson-bar"
                      style={{ height: `${Math.abs(pearsonCorrelations[index]) * 100}%` }}
                      title={`Pearson: ${pearsonCorrelations[index]?.toFixed(3)}`}
                    >
                      <span className="bar-value">{pearsonCorrelations[index]?.toFixed(3)}</span>
                    </div>
                    <div 
                      className="bar spearman-bar"
                      style={{ height: `${Math.abs(spearmanCorrelations[index]) * 100}%` }}
                      title={`Spearman: ${spearmanCorrelations[index]?.toFixed(3)}`}
                    >
                      <span className="bar-value">{spearmanCorrelations[index]?.toFixed(3)}</span>
                    </div>
                  </div>
                  <div className="year-label">{year}</div>
                </div>
              ))}
            </div>
            <div className="chart-legend">
              <div className="legend-item">
                <div className="legend-color pearson-color"></div>
                <span>Corr√©lation de Pearson</span>
              </div>
              <div className="legend-item">
                <div className="legend-color spearman-color"></div>
                <span>Corr√©lation de Spearman</span>
              </div>
            </div>
          </div>
        </div>

        <div className="correlation-details">
          <h4>D√©tails par Ann√©e</h4>
          <div className="details-table">
            {years.map(year => {
              const data = correlationData[year];
              return (
                <div key={year} className="detail-row">
                  <div className="year-cell">{year}</div>
                  <div className="correlation-cell">
                    <span className="correlation-label">Pearson:</span>
                    <span className="correlation-value">{data?.pearson?.correlation?.toFixed(3)}</span>
                    <span className="p-value">(p={data?.pearson?.p_value?.toFixed(3)})</span>
                  </div>
                  <div className="correlation-cell">
                    <span className="correlation-label">Spearman:</span>
                    <span className="correlation-value">{data?.spearman?.correlation?.toFixed(3)}</span>
                    <span className="p-value">(p={data?.spearman?.p_value?.toFixed(3)})</span>
                  </div>
                  <div className="sample-cell">
                    <span className="sample-size">{data?.sample_size} pays</span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    );
  };

  const renderSportCostAnalysis = () => {
    if (!sportCostData) return <div>Chargement...</div>;

    const costLevels = Object.keys(sportCostData);
    const correlations = costLevels.map(level => sportCostData[level]?.pearson?.correlation || 0);

    return (
      <div className="sport-cost-analysis">
        <h3>üèÖ Analyse par Co√ªt des Sports</h3>
        
        <div className="cost-explanation">
          <p>
            Les sports sont class√©s selon leur co√ªt d'infrastructure et d'entra√Ænement :
          </p>
          <ul>
            <li><strong>Co√ªt √©lev√© :</strong> Sports n√©cessitant des √©quipements sp√©cialis√©s (voile, √©quitation, cyclisme, etc.)</li>
            <li><strong>Co√ªt moyen :</strong> Sports avec infrastructures standard (athl√©tisme, basketball, etc.)</li>
            <li><strong>Co√ªt faible :</strong> Sports n√©cessitant peu d'infrastructure (marathon, marche, etc.)</li>
          </ul>
        </div>

        <div className="cost-chart">
          <div className="chart-bars">
            {costLevels.map((level, index) => {
              const data = sportCostData[level];
              const correlation = data?.pearson?.correlation || 0;
              const height = Math.abs(correlation) * 100;
              
              return (
                <div key={level} className="cost-bar">
                  <div 
                    className="bar"
                    style={{ height: `${height}%` }}
                    title={`Corr√©lation: ${correlation.toFixed(3)}`}
                  >
                    <span className="bar-value">{correlation.toFixed(3)}</span>
                  </div>
                  <div className="cost-label">
                    <div className="level-name">{level.replace('_', ' ')}</div>
                    <div className="level-stats">
                      {data?.sports_count} sports, {data?.medals_count} m√©dailles
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        <div className="cost-details">
          <h4>D√©tails par Niveau de Co√ªt</h4>
          <div className="cost-table">
            {costLevels.map(level => {
              const data = sportCostData[level];
              return (
                <div key={level} className="cost-row">
                  <div className="cost-level">{level.replace('_', ' ')}</div>
                  <div className="correlation-info">
                    <span>Pearson: {data?.pearson?.correlation?.toFixed(3)}</span>
                    <span>Spearman: {data?.spearman?.correlation?.toFixed(3)}</span>
                  </div>
                  <div className="stats-info">
                    <span>{data?.sports_count} sports</span>
                    <span>{data?.medals_count} m√©dailles</span>
                    <span>{data?.sample_size} pays</span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    );
  };

  const renderGDPPerCapitaAnalysis = () => {
    if (!gdpPerCapitaData) return <div>Chargement...</div>;

    return (
      <div className="gdp-per-capita-analysis">
        <h3>üë• Analyse PIB par Habitant</h3>
        
        <div className="per-capita-explanation">
          <p>
            Le PIB par habitant offre une perspective diff√©rente en tenant compte de la taille de la population.
            Cela permet d'identifier les pays qui performent mieux que leur PIB total ne le sugg√®re.
          </p>
        </div>

        <div className="per-capita-results">
          <div className="correlation-summary">
            <div className="correlation-card">
              <h4>Corr√©lation Pearson</h4>
              <div className="correlation-value">
                {gdpPerCapitaData.pearson?.correlation?.toFixed(3)}
              </div>
              <div className="p-value">
                p = {gdpPerCapitaData.pearson?.p_value?.toFixed(3)}
              </div>
            </div>
            
            <div className="correlation-card">
              <h4>Corr√©lation Spearman</h4>
              <div className="correlation-value">
                {gdpPerCapitaData.spearman?.correlation?.toFixed(3)}
              </div>
              <div className="p-value">
                p = {gdpPerCapitaData.spearman?.p_value?.toFixed(3)}
              </div>
            </div>
            
            <div className="sample-info">
              <h4>√âchantillon</h4>
              <div className="sample-size">
                {gdpPerCapitaData.sample_size} pays analys√©s
              </div>
            </div>
          </div>
        </div>

        <div className="interpretation">
          <h4>Interpr√©tation</h4>
          <p>
            {gdpPerCapitaData.pearson?.correlation > 0.5 ? 
              "Une corr√©lation positive forte sugg√®re que le PIB par habitant est un bon pr√©dicteur des performances olympiques." :
              gdpPerCapitaData.pearson?.correlation > 0.3 ?
              "Une corr√©lation positive mod√©r√©e indique une relation significative entre PIB par habitant et m√©dailles." :
              "Une corr√©lation faible sugg√®re que d'autres facteurs que le PIB par habitant influencent davantage les performances."
            }
          </p>
        </div>
      </div>
    );
  };

  if (loading) {
    return (
      <div className="gdp-analysis-loading">
        <div className="loading-spinner"></div>
        <p>Chargement de l'analyse PIB-m√©dailles...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="gdp-analysis-error">
        <div className="error-icon">‚ùå</div>
        <h3>Erreur de chargement</h3>
        <p>{error}</p>
        <button onClick={fetchAnalysisData} className="retry-button">
          R√©essayer
        </button>
      </div>
    );
  }

  return (
    <div className="gdp-medals-analysis">
      <div className="analysis-tabs">
        <button 
          className={`tab-button ${activeTab === 'overview' ? 'active' : ''}`}
          onClick={() => setActiveTab('overview')}
        >
          üìä Vue d'ensemble
        </button>
        <button 
          className={`tab-button ${activeTab === 'correlation' ? 'active' : ''}`}
          onClick={() => setActiveTab('correlation')}
        >
          üìà Corr√©lation par Ann√©e
        </button>
        <button 
          className={`tab-button ${activeTab === 'sport-cost' ? 'active' : ''}`}
          onClick={() => setActiveTab('sport-cost')}
        >
          üèÖ Co√ªt des Sports
        </button>
        <button 
          className={`tab-button ${activeTab === 'per-capita' ? 'active' : ''}`}
          onClick={() => setActiveTab('per-capita')}
        >
          üë• PIB par Habitant
        </button>
      </div>

      <div className="analysis-content">
        {activeTab === 'overview' && renderOverviewTab()}
        {activeTab === 'correlation' && renderCorrelationByYear()}
        {activeTab === 'sport-cost' && renderSportCostAnalysis()}
        {activeTab === 'per-capita' && renderGDPPerCapitaAnalysis()}
      </div>
    </div>
  );
};

export default GDPMedalsAnalysis;
